import os
import asyncio
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ======================
# ENV & Bot
# ======================
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ======================
# FastAPI app
# ======================
app = FastAPI()

@app.get("/")
async def health():
    return {"status": "ok", "bot": "Dark Desires Play"}

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"status": "ok"}

@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
    print("ü§ñ Dark Desires Play Bot –∑–∞–ø—É—â–µ–Ω...")


# ======================
# FSM (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
# ======================
class Register(StatesGroup):
    gender = State()
    search_for = State()
    city = State()
    about = State()

user_profiles = {}

# ======================
# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
# ======================
def kb_start():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ö° –í–û–ô–¢–ò –ù–ê –¢–Å–ú–ù–£–Æ –°–¢–û–†–û–ù–£ ‚ö°", callback_data="enter_dark_side")]
        ]
    )

def kb_age():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ú–Ω–µ 18", callback_data="confirm_18")]
        ]
    )

def kb_rules():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üî• –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞ üî•", callback_data="accept_rules")]
        ]
    )

def kb_gender():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_m"),
                InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_f"),
                InlineKeyboardButton(text="üåà –î—Ä—É–≥–æ–µ", callback_data="gender_o")
            ]
        ]
    )

def kb_search_for():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω", callback_data="search_f"),
                InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω", callback_data="search_m"),
                InlineKeyboardButton(text="üî• –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="search_a")
            ]
        ]
    )

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ======================

@dp.message(CommandStart())
async def start(message: types.Message):
    text = (
        "üñ§ <b>DARK DESIRES PLAY</b> üî•\n\n"
        "–¢–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n"
        "–ë–µ–∑ –∏–º—ë–Ω. –ë–µ–∑ –º–∞—Å–æ–∫. –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.\n\n"
        "<i>–¢—ã –≥–æ—Ç–æ–≤ –≤–æ–π—Ç–∏?</i>"
    )
    await message.answer(text, reply_markup=kb_start())


@dp.callback_query(F.data == "enter_dark_side")
async def enter_dark_side(callback: types.CallbackQuery):
    text = (
        "üåí <b>–¢–Å–ú–ù–ê–Ø –°–¢–û–†–û–ù–ê –ù–ï –î–õ–Ø –í–°–ï–•</b> üåí\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ —Ç–µ–±–µ —É–∂–µ –µ—Å—Ç—å 18 –ª–µ—Ç\n"
        "–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∑–¥—Ä–∞–≤–æ–º —É–º–µ –∏ –ø–∞–º—è—Ç–∏."
    )
    await callback.message.edit_text(text, reply_markup=kb_age())


@dp.callback_query(F.data == "confirm_18")
async def confirm_18(callback: types.CallbackQuery):
    text = (
        "üñ§ <b>–¢–Å–ú–ù–ê–Ø –°–¢–û–†–û–ù–ê –ù–ï –î–õ–Ø –í–°–ï–•</b> üñ§\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ —Ç–µ–±–µ —É–∂–µ –µ—Å—Ç—å 18 –ª–µ—Ç\n"
        "–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∑–¥—Ä–∞–≤–æ–º —É–º–µ –∏ –ø–∞–º—è—Ç–∏.\n\n"
        "–¢—ã –æ–±—è–∑—É–µ—à—å—Å—è —Å–æ–±–ª—é–¥–∞—Ç—å –ü—Ä–∞–≤–∏–ª–∞ DARK DESIRES PLAY:\n\n"
        "1. –í—Å—ë, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –∑–¥–µ—Å—å.\n"
        "2. –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å ‚Äî —Å–≤—è—â–µ–Ω–Ω–∞. –ù–µ –Ω–∞—Ä—É—à–∞–π –µ—ë.\n"
        "3. –£–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö. –ë–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è. –ë–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è.\n"
        "4. –í—Å—ë ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é.\n"
        "5. –ù–∞—Ä—É—à–∏–ª ‚Äî –≤—ã–ª–µ—Ç–µ–ª. –ë–µ–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏–π.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –∫–ª—É–±–∞."
    )
    await callback.message.edit_text(text, reply_markup=kb_rules())


@dp.callback_query(F.data == "accept_rules")
async def accept_rules(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚Üí –û—Ç–ª–∏—á–Ω–æ. –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ...")
    await asyncio.sleep(1.5)
    await callback.message.edit_text("–ö—Ç–æ —Ç—ã?", reply_markup=kb_gender())
    await state.set_state(Register.gender)


@dp.callback_query(Register.gender, F.data.startswith("gender_"))
async def reg_gender(callback: types.CallbackQuery, state: FSMContext):
    genders = {"gender_m": "–ú—É–∂—á–∏–Ω–∞", "gender_f": "–ñ–µ–Ω—â–∏–Ω–∞", "gender_o": "–î—Ä—É–≥–æ–µ"}
    gender = genders[callback.data]
    await state.update_data(gender=gender)
    await callback.message.edit_text("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=kb_search_for())
    await state.set_state(Register.search_for)


@dp.callback_query(Register.search_for, F.data.startswith("search_"))
async def reg_search(callback: types.CallbackQuery, state: FSMContext):
    search_map = {"search_m": "–ú—É–∂—á–∏–Ω", "search_f": "–ñ–µ–Ω—â–∏–Ω", "search_a": "–í—Å–µ—Ö"}
    search_for = search_map[callback.data]
    await state.update_data(search_for=search_for)
    await callback.message.edit_text("–ì–¥–µ —Ç–µ–±—è –∏—Å–∫–∞—Ç—å? üèô\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await state.set_state(Register.city)


@dp.message(Register.city)
async def reg_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ.\n(–∏–ª–∏ –Ω–∞–ø–∏—à–∏ /skip, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –∑–∞–≥–∞–¥–∫–æ–π)"
    )
    await state.set_state(Register.about)


@dp.message(Register.about)
async def reg_about(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    data = await state.get_data()
    user_profiles[message.from_user.id] = data
    await state.clear()

    profile = (
        f"üíã <b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–ò—â–µ—à—å: {data['search_for']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–û —Å–µ–±–µ: {data['about']}\n\n"
        f"üî• –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å DARK DESIRES PLAY."
    )
    await message.answer(profile)


@dp.message(Register.about, F.text == "/skip")
async def reg_skip(message: types.Message, state: FSMContext):
    await state.update_data(about="‚Äî")
    data = await state.get_data()
    user_profiles[message.from_user.id] = data
    await state.clear()

    profile = (
        f"üíã <b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–ò—â–µ—à—å: {data['search_for']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n\n"
        f"üî• –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å DARK DESIRES PLAY."
    )
    await message.answer(profile)


# ======================
# Run
# ======================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
