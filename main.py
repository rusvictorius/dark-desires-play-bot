import os
from dotenv import load_dotenv

from fastapi import FastAPI, Request
import uvicorn

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ======================
# ENV & Bot
# ======================
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://dark-desires-play-bot.onrender.com/webhook

if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ======================
# FastAPI app
# ======================
app = FastAPI()


# --- Health-check (—É–±–∏—Ä–∞–µ—Ç 404 –Ω–∞ –∫–æ—Ä–Ω–µ –∏ —É–¥–æ–±–µ–Ω –¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞) ---
@app.get("/")
async def health():
    return {"status": "ok", "app": "Dark Desires Play"}


# --- Webhook endpoint (–í–ê–ñ–ù–û: –ø–∞—Ä—Å–∏–º Update –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ) ---
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()                      # dict –∏–∑ Telegram
    update = types.Update.model_validate(data)       # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ aiogram.types.Update
    await dp.feed_update(bot, update)                # —Å–∫–∞—Ä–º–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    return {"status": "ok"}


# --- –°—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        try:
            await bot.set_webhook(WEBHOOK_URL)
        except Exception as e:
            # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –≤–µ–±—Ö—É–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"Can't set webhook: {e}")


# ======================
# UI helpers
# ======================
def kb_enter() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üñ§ –í–û–ô–¢–ò –ù–ê –¢–Å–ú–ù–£–Æ –°–¢–û–†–û–ù–£ üñ§", callback_data="enter_dark_side")]
        ]
    )

def kb_age() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ú–Ω–µ 18", callback_data="confirm_age")]
        ]
    )


# ======================
# Handlers
# ======================
@dp.message(CommandStart())
async def start(message: types.Message):
    # –ß–∏—Å—Ç–∏–º /start, —á—Ç–æ–±—ã —ç–∫—Ä–∞–Ω –≤—ã–≥–ª—è–¥–µ–ª –æ–ø—Ä—è—Ç–Ω–æ
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass

    text = (
        "üï∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DARK DESIRES PLAY</b> üî•\n\n"
        "–ó–¥–µ—Å—å –Ω–µ—Ç –∏–º—ë–Ω. –¢–æ–ª—å–∫–æ –∂–µ–ª–∞–Ω–∏—è.\n"
        "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. –ò–≥—Ä–∞. –°—Ç—Ä–∞—Å—Ç—å.\n\n"
        "<i>–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥‚Ä¶</i>"
    )
    await message.answer(text, reply_markup=kb_enter())


@dp.callback_query(F.data == "enter_dark_side")
async def enter_dark_side(callback: types.CallbackQuery):
    text = (
        "üåí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—ë–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.</b>\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–µ–±–µ 18 –ª–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )
    await callback.message.edit_text(text, reply_markup=kb_age())


@dp.callback_query(F.data == "confirm_age")
async def confirm_age(callback: types.CallbackQuery):
    text = (
        "üíã –û—Ç–ª–∏—á–Ω–æ.\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≤–Ω—É—Ç—Ä–∏ –∏–≥—Ä—ã –∂–µ–ª–∞–Ω–∏–π.\n\n"
        "<i>–ú–µ–Ω—é —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ...</i>"
    )
    await callback.message.edit_text(text)


# ======================
# Run (–ª–æ–∫–∞–ª—å–Ω–æ / –Ω–∞ Render)
# ======================
if __name__ == "__main__":
    print("ü§ñ Dark Desires Play Bot –∑–∞–ø—É—â–µ–Ω...")
    uvicorn.run(app, host="0.0.0.0", port=8000)
